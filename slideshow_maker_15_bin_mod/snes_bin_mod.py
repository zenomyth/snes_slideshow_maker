import sys
import os

def parse_pcx(filename):
    with open(filename, mode='rb') as file:
        content = file.read()
    i = 0x80
    img_data = []
    while True:
        if i == len(content) - 1 - 256 * 3:
            break
        if content[i] & 0xC0 == 0xC0:
            for j in range(content[i] & 0x3F):
                img_data.append(content[i + 1])
            i = i + 1
        else:
            img_data.append(content[i])
        i = i + 1

    palette = bytearray()
    for i in range(256):
        palette.append((content[len(content) - 256 * 3 + i * 3] >> 3) | ((content[len(content) - 256 * 3 + i * 3 + 1] >> 3 << 5) & 0xFF))
        palette.append(((content[len(content) - 256 * 3 + i * 3 + 1] >> 6) & 0xFF) | ((content[len(content) - 256 * 3 + i * 3 + 2] >> 3 << 2) & 0xFF))
    # with open(filetitle + '_palette.dat', mode='wb') as file:
        # file.write(palette)

    tiles = bytearray(256 * 224)
    for i in range(224):
        for j in range(256):
            px = img_data[i * 256 + j]
            t_idx = (i // 8) * 32 + (j // 8)
            ii = i % 8
            jj = j % 8
            for k in range(8):
                if px & 1 == 1:
                    tiles[64 * t_idx + k // 2 * 16 + ii * 2 + k % 2] = tiles[64 * t_idx + k // 2 * 16 + ii * 2 + k % 2] | (1 << (7 - jj))
                px = px >> 1
    # with open(filetitle + '_tiles.dat', mode='wb') as file:
        # file.write(tiles)
    return palette, tiles

def main():
    if len(sys.argv) != 2:
        print("pcx folder expected!", file=sys.stderr)
        sys.exit(1)
    pcx_folder = sys.argv[1]
    with open('slideshow.sfc', mode='wb') as file:
        instructions = bytes([0x78, 0x18, 0xFB, 0xD8, 0xC2, 0x30, 0x9C, 0x00, 0x42, 0x9C, 0x02, 0x42, 0x9C, 0x04, 0x42, 0x9C,
                                0x06, 0x42, 0x9C, 0x08, 0x42, 0x9C, 0x0A, 0x42, 0x9C, 0x0C, 0x42, 0xA9, 0x80, 0x00, 0x8D, 0x00,
                                0x21, 0x9C, 0x02, 0x21, 0x9C, 0x05, 0x21, 0x9C, 0x07, 0x21, 0x9C, 0x09, 0x21, 0x9C, 0x0B, 0x21,
                                0x9C, 0x16, 0x21, 0x9C, 0x23, 0x21, 0x9C, 0x26, 0x21, 0x9C, 0x28, 0x21, 0x9C, 0x2A, 0x21, 0x9C,
                                0x2C, 0x21, 0x9C, 0x2E, 0x21, 0xA2, 0x30, 0x00, 0x8E, 0x30, 0x21, 0xA0, 0xE0, 0x00, 0x8C, 0x32,
                                0x21, 0xE2, 0x20, 0x9C, 0x25, 0x21, 0x64, 0x05, 0x64, 0x01, 0xA9, 0x81, 0x85, 0x04, 0x20, 0x41,
                                0x81, 0xA9, 0x03, 0x8D, 0x05, 0x21, 0xA9, 0x70, 0x8D, 0x07, 0x21, 0xA9, 0x00, 0x8D, 0x0B, 0x21,
                                0xA9, 0x80, 0x8D, 0x15, 0x21, 0xA2, 0x00, 0x00, 0x8E, 0x16, 0x21, 0xA2, 0x00, 0x80, 0x86, 0x02,
                                0xA0, 0x07, 0x00, 0x20, 0x65, 0x81, 0x88, 0xD0, 0xFA, 0xA9, 0x82, 0x85, 0x04, 0xA2, 0x00, 0x80,
                                0x86, 0x02, 0xA0, 0x07, 0x00, 0x20, 0x65, 0x81, 0x88, 0xD0, 0xFA, 0xA9, 0x83, 0x85, 0x04, 0xA2,
                                0x00, 0x80, 0x86, 0x02, 0xA2, 0x00, 0x70, 0x8E, 0x16, 0x21, 0xA2, 0x00, 0x00, 0x8E, 0x18, 0x21,
                                0xE8, 0xE0, 0x80, 0x03, 0xD0, 0xF7, 0xA2, 0x00, 0x00, 0x9C, 0x18, 0x21, 0x9C, 0x19, 0x21, 0xE8,
                                0xE0, 0x80, 0x00, 0xD0, 0xF4, 0xA9, 0x01, 0x8D, 0x2C, 0x21, 0xA9, 0x0F, 0x8D, 0x00, 0x21, 0xA9,
                                0x81, 0x8D, 0x00, 0x42, 0xA5, 0x00, 0xCB, 0xC5, 0x00, 0xF0, 0xFB, 0xA5, 0x05, 0x85, 0x06, 0xAD,
                                0x19, 0x42, 0x85, 0x05, 0xA5, 0x01, 0xD0, 0x1C, 0xA5, 0x05, 0x45, 0x06, 0x25, 0x05, 0x89, 0x80,
                                0xF0, 0x47, 0xA9, 0x00, 0x8D, 0x00, 0x21, 0x20, 0x41, 0x81, 0xA2, 0x00, 0x00, 0x8E, 0x16, 0x21,
                                0xE6, 0x01, 0x80, 0xD0, 0x20, 0x65, 0x81, 0xA6, 0x02, 0xE0, 0x00, 0xF0, 0xD0, 0xC6, 0xA5, 0x01,
                                0xC9, 0x01, 0xF0, 0x1A, 0xE6, 0x04, 0xA2, 0x00, 0x80, 0x86, 0x02, 0xA5, 0x04, 0xC9, 0x9F, 0xD0,
                                0x04, 0xA9, 0x81, 0x85, 0x04, 0xA9, 0x0F, 0x8D, 0x00, 0x21, 0x64, 0x01, 0x80, 0xA6, 0xE6, 0x04,
                                0xA2, 0x00, 0x80, 0x86, 0x02, 0xE6, 0x01, 0x80, 0x9B, 0x80, 0x99, 0x2C, 0x10, 0x42, 0xE6, 0x00,
                                0x40, 0x9C, 0x21, 0x21, 0xA9, 0x00, 0x8D, 0x00, 0x43, 0xA9, 0x22, 0x8D, 0x01, 0x43, 0xA2, 0x00,
                                0xF0, 0x8E, 0x02, 0x43, 0xA5, 0x04, 0x8D, 0x04, 0x43, 0xA2, 0x00, 0x02, 0x8E, 0x05, 0x43, 0xA9,
                                0x01, 0x8D, 0x0B, 0x42, 0x60, 0xA9, 0x01, 0x8D, 0x00, 0x43, 0xA9, 0x18, 0x8D, 0x01, 0x43, 0xA6,
                                0x02, 0x8E, 0x02, 0x43, 0xA5, 0x04, 0x8D, 0x04, 0x43, 0xA2, 0x00, 0x10, 0x8E, 0x05, 0x43, 0xA9,
                                0x01, 0x8D, 0x0B, 0x42, 0xC2, 0x20, 0xA5, 0x02, 0x18, 0x69, 0x00, 0x10, 0x85, 0x02, 0xE2, 0x20,
                                0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
        header = bytes([0x53, 0x4E, 0x45, 0x53, 0x20, 0x53, 0x4C, 0x49, 0x44, 0x45, 0x53, 0x48, 0x4F, 0x57, 0x20, 0x20,
                                0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x00, 0x0A, 0x00, 0x01, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00,
                                0x00, 0x00, 0x00, 0x00, 0x40, 0x81, 0x40, 0x81, 0x40, 0x81, 0x3B, 0x81, 0x00, 0x80, 0x40, 0x81,
                                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00])
        file.write(instructions)
        file.seek(0x7FC0)
        file.write(header)
        for i in range(15):
            palette, tiles = parse_pcx(os.path.join(pcx_folder, "{:02d}.pcx".format(i + 1)))
            base_addr = i * 0x10000
            file.seek(base_addr + 0x8000, 0)
            file.write(tiles[0:0x7000])
            file.seek(base_addr + 0x10000, 0)
            file.write(tiles[0x7000:])
            file.seek(base_addr + 0xF000, 0)
            file.write(palette)
        file.seek(0x100000 - 1)
        file.write(b'\x00')

    sys.exit(0)

if __name__ == '__main__':
    main()
