import sys
import os
import math
import getopt

def parse_pcx(filename):
    with open(filename, mode='rb') as file:
        content = file.read()
    i = 0x80
    img_data = []
    while True:
        if i == len(content) - 1 - 256 * 3:
            break
        if content[i] & 0xC0 == 0xC0:
            for j in range(content[i] & 0x3F):
                img_data.append(content[i + 1])
            i = i + 1
        else:
            img_data.append(content[i])
        i = i + 1

    palette = bytearray()
    for i in range(256):
        palette.append((content[len(content) - 256 * 3 + i * 3] >> 3) | ((content[len(content) - 256 * 3 + i * 3 + 1] >> 3 << 5) & 0xFF))
        palette.append(((content[len(content) - 256 * 3 + i * 3 + 1] >> 6) & 0xFF) | ((content[len(content) - 256 * 3 + i * 3 + 2] >> 3 << 2) & 0xFF))

    tiles = bytearray(256 * 224)
    for i in range(224):
        for j in range(256):
            px = img_data[i * 256 + j]
            t_idx = (i // 8) * 32 + (j // 8)
            ii = i % 8
            jj = j % 8
            for k in range(8):
                if px & 1 == 1:
                    tiles[64 * t_idx + k // 2 * 16 + ii * 2 + k % 2] = tiles[64 * t_idx + k // 2 * 16 + ii * 2 + k % 2] | (1 << (7 - jj))
                px = px >> 1
    return palette, tiles

def usage():
    print("Usage: python snes_bin_mod.py [-o output_filename] pcx_file_directory")

def main():
    try:
        opts, args = getopt.getopt(sys.argv[1:], "ho:", ["help", "output="])
    except getopt.GetoptError as err:
        print(err)
        usage()
        sys.exit(2)
    output_filename = 'slideshow.sfc'
    for o, a in opts:
        if o in ("-h", "--help"):
            usage()
            sys.exit()
        elif o in ("-o", "--output"):
            output_filename = a
        else:
            assert False, "unhandled option"
    if len(args) != 1:
        print("pcx folder expected!", file=sys.stderr)
        sys.exit(1)
    pcx_folder = args[0]
    file_list = []
    for root, dirs, files in os.walk(pcx_folder):
        for file in files:
            file_list.append(os.path.join(root, file))
    pcx_num = len(file_list)
    with open(output_filename, mode='wb') as file:
        instructions = bytearray([0x78, 0x18, 0xFB, 0xD8, 0xC2, 0x30, 0x9C, 0x00, 0x42, 0x9C, 0x02, 0x42, 0x9C, 0x04, 0x42, 0x9C,
                                0x06, 0x42, 0x9C, 0x08, 0x42, 0x9C, 0x0A, 0x42, 0x9C, 0x0C, 0x42, 0xA9, 0x80, 0x00, 0x8D, 0x00,
                                0x21, 0x9C, 0x02, 0x21, 0x9C, 0x05, 0x21, 0x9C, 0x07, 0x21, 0x9C, 0x09, 0x21, 0x9C, 0x0B, 0x21,
                                0x9C, 0x16, 0x21, 0x9C, 0x23, 0x21, 0x9C, 0x26, 0x21, 0x9C, 0x28, 0x21, 0x9C, 0x2A, 0x21, 0x9C,
                                0x2C, 0x21, 0x9C, 0x2E, 0x21, 0xA2, 0x30, 0x00, 0x8E, 0x30, 0x21, 0xA0, 0xE0, 0x00, 0x8C, 0x32,
                                0x21, 0xE2, 0x20, 0x9C, 0x25, 0x21, 0x64, 0x00, 0x64, 0x09, 0x20, 0x08, 0x81, 0x20, 0x1F, 0x81,
                                0xA9, 0x03, 0x8D, 0x05, 0x21, 0xA9, 0x70, 0x8D, 0x07, 0x21, 0xA9, 0x00, 0x8D, 0x0B, 0x21, 0xA9,
                                0x80, 0x8D, 0x15, 0x21, 0xA2, 0x00, 0x00, 0x8E, 0x16, 0x21, 0xA0, 0x0E, 0x00, 0x20, 0x4E, 0x81,
                                0x88, 0xD0, 0xFA, 0xE6, 0x01, 0xA2, 0x00, 0x70, 0x8E, 0x16, 0x21, 0xA2, 0x00, 0x00, 0x8E, 0x18,
                                0x21, 0xE8, 0xE0, 0x80, 0x03, 0xD0, 0xF7, 0xA2, 0x00, 0x00, 0x9C, 0x18, 0x21, 0x9C, 0x19, 0x21,
                                0xE8, 0xE0, 0x80, 0x00, 0xD0, 0xF4, 0xA9, 0x01, 0x8D, 0x2C, 0x21, 0xA9, 0x0F, 0x8D, 0x00, 0x21,
                                0xA9, 0x81, 0x8D, 0x00, 0x42, 0xA5, 0x00, 0xCB, 0xC5, 0x00, 0xF0, 0xFB, 0xA5, 0x09, 0x85, 0x0A,
                                0xAD, 0x19, 0x42, 0x85, 0x09, 0xA5, 0x02, 0xD0, 0x1E, 0xA5, 0x09, 0x45, 0x0A, 0x25, 0x09, 0x89,
                                0x80, 0xF0, 0x2D, 0xA9, 0x00, 0x8D, 0x00, 0x21, 0x20, 0x1F, 0x81, 0xA2, 0x00, 0x00, 0x8E, 0x16,
                                0x21, 0xA9, 0x0E, 0x85, 0x02, 0x80, 0xCE, 0x20, 0x4E, 0x81, 0xC6, 0x02, 0xD0, 0xC7, 0xA9, 0x0F,
                                0x8D, 0x00, 0x21, 0xE6, 0x01, 0xA5, 0x01, 0xC9, 0x11, 0xD0, 0xBA, 0x20, 0x08, 0x81, 0x80, 0xB5,
                                0x80, 0xB3, 0x2C, 0x10, 0x42, 0xE6, 0x00, 0x40, 0x64, 0x01, 0x64, 0x02, 0xA9, 0x81, 0x85, 0x03,
                                0xA2, 0x00, 0x80, 0x86, 0x04, 0xA9, 0x80, 0x85, 0x06, 0xA2, 0x00, 0xD0, 0x86, 0x07, 0x60, 0x9C,
                                0x21, 0x21, 0xA9, 0x00, 0x8D, 0x00, 0x43, 0xA9, 0x22, 0x8D, 0x01, 0x43, 0xA6, 0x07, 0x8E, 0x02,
                                0x43, 0xA5, 0x06, 0x8D, 0x04, 0x43, 0xA2, 0x00, 0x02, 0x8E, 0x05, 0x43, 0xA9, 0x01, 0x8D, 0x0B,
                                0x42, 0xC2, 0x20, 0xA5, 0x07, 0x18, 0x69, 0x00, 0x02, 0x85, 0x07, 0xE2, 0x20, 0x60, 0xA9, 0x01,
                                0x8D, 0x00, 0x43, 0xA9, 0x18, 0x8D, 0x01, 0x43, 0xA6, 0x04, 0x8E, 0x02, 0x43, 0xA5, 0x03, 0x8D,
                                0x04, 0x43, 0xA2, 0x00, 0x10, 0x8E, 0x05, 0x43, 0xA9, 0x01, 0x8D, 0x0B, 0x42, 0xC2, 0x20, 0xA5,
                                0x04, 0x18, 0x69, 0x00, 0x10, 0x85, 0x04, 0xE2, 0x20, 0xB0, 0x01, 0x60, 0xA2, 0x00, 0x80, 0x86,
                                0x04, 0xE6, 0x03, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
        header = bytearray([0x53, 0x4E, 0x45, 0x53, 0x20, 0x53, 0x4C, 0x49, 0x44, 0x45, 0x53, 0x48, 0x4F, 0x57, 0x20, 0x20,
                            0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x00, 0x0A, 0x00, 0x01, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00,
                            0x00, 0x00, 0x00, 0x00, 0x07, 0x81, 0x07, 0x81, 0x07, 0x81, 0x02, 0x81, 0x00, 0x80, 0x07, 0x81,
                            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00])

        instructions[0xF8] = pcx_num
        header[0x17] = int(math.ceil(math.log2(pcx_num * 56 + 32)))
        file.write(instructions)
        file.seek(0x7FC0)
        file.write(header)
        i = 0
        for pcx_file in file_list:
            palette, tiles = parse_pcx(pcx_file)
            file.seek(0x5000 + i * 0x200, 0)
            file.write(palette)
            file.seek(0x8000 + i * 0xE000, 0)
            file.write(tiles)
            i += 1
        file_size_kb = int(math.ceil((pcx_num * 56 + 32) / 32)) * 32
        if pcx_num * 56 + 32 < file_size_kb:
            file.seek(file_size_kb * 1024 - 1)
            file.write(b'\x00')

    sys.exit(0)

if __name__ == '__main__':
    main()
